üö® CRITICAL - Data Integrity & Security
1. Enforce User-Project-Task Assignment Rules
prisma// Option 1: Add a composite unique constraint for validation
model ProjectMember {
  // ... existing fields ...
  @@unique([projectId, userId]) // Already have this
  @@index([userId, role])
  @@map("project_members")
}

// Option 2: Add validation check in TaskAssignment
model TaskAssignment {
  id         String   @id @default(cuid())
  taskId     String   @map("task_id")
  userId     String   @map("user_id")
  projectId  String   @map("project_id") // ADD THIS for validation
  assignedAt DateTime @default(now()) @map("assigned_at")
  isActive   Boolean  @default(true) @map("is_active")

  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  
  // This ensures assignee is a project member (validate in app layer)
  @@unique([taskId, userId])
  @@index([userId, projectId]) // For validation queries
  @@map("task_assignments")
}
2. Cross-Lab Access Control
prisma// Add labId to enforce lab boundaries
model ProjectMember {
  // ... existing fields ...
  labId     String    @map("lab_id") // ADD THIS
  
  // Relations
  lab       Lab       @relation(fields: [labId], references: [id])
  
  @@index([labId, userId]) // For lab access checks
}
üîß ESSENTIAL - Core Collaboration Features
3. Unified Comment System
prismamodel Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  entityType  CommentableType // Use enum for type safety
  entityId    String   @map("entity_id")
  parentId    String?  @map("parent_id") // For threaded discussions
  
  authorId    String   @map("author_id")
  editedAt    DateTime? @map("edited_at")
  isDeleted   Boolean  @default(false) @map("is_deleted") // Soft delete
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  author      User     @relation(fields: [authorId], references: [id])
  parent      Comment? @relation("CommentThread", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentThread")
  mentions    Mention[]
  attachments Attachment[] // Comments can have attachments
  
  @@index([entityType, entityId, createdAt])
  @@index([authorId, createdAt])
  @@map("comments")
}

enum CommentableType {
  PROJECT
  TASK
  IDEA
  STANDUP
  BUCKET
}
4. File Attachment System
prismamodel Attachment {
  id          String   @id @default(cuid())
  filename    String
  url         String   // S3/CloudStorage URL
  fileSize    Int      @map("file_size") // in bytes
  mimeType    String   @map("mime_type")
  
  entityType  AttachableType // Use enum
  entityId    String   @map("entity_id")
  
  uploadedById String  @map("uploaded_by_id")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  isDeleted    Boolean @default(false) @map("is_deleted")
  
  uploadedBy   User    @relation(fields: [uploadedById], references: [id])
  
  @@index([entityType, entityId])
  @@index([uploadedById, uploadedAt])
  @@map("attachments")
}

enum AttachableType {
  PROJECT
  TASK
  COMMENT
  IDEA
  ACTION_ITEM
}
5. Notification System
prismamodel Notification {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  type       NotificationType
  title      String
  message    String   @db.Text
  
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  metadata   Json?    // Additional context
  
  read       Boolean  @default(false)
  readAt     DateTime? @map("read_at")
  createdAt  DateTime @default(now()) @map("created_at")
  
  user       User     @relation(fields: [userId], references: [id])
  
  @@index([userId, read, createdAt])
  @@index([entityType, entityId])
  @@map("notifications")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_DUE_SOON
  TASK_OVERDUE
  PROJECT_STATUS_CHANGE
  COMMENT_MENTION
  COMMENT_REPLY
  DEADLINE_APPROACHING
  REVIEW_REQUESTED
  BUCKET_ASSIGNMENT
}

model Mention {
  id        String   @id @default(cuid())
  commentId String   @map("comment_id")
  userId    String   @map("user_id")
  read      Boolean  @default(false)
  readAt    DateTime? @map("read_at")
  
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([commentId, userId])
  @@map("mentions")
}
üìä IMPORTANT - Project Management Features
6. Status Change History (Audit Trail)
prismamodel StatusHistory {
  id          String   @id @default(cuid())
  entityType  String   // 'Project' | 'Task'
  entityId    String   @map("entity_id")
  fromStatus  String?  @map("from_status") // null for initial status
  toStatus    String   @map("to_status")
  reason      String?  @db.Text // Optional change reason
  changedById String   @map("changed_by_id")
  changedAt   DateTime @default(now()) @map("changed_at")
  
  changedBy   User     @relation(fields: [changedById], references: [id])
  
  @@index([entityType, entityId, changedAt])
  @@index([changedById, changedAt])
  @@map("status_history")
}
7. Time Tracking
prismamodel TimeEntry {
  id          String   @id @default(cuid())
  taskId      String   @map("task_id")
  userId      String   @map("user_id")
  projectId   String   @map("project_id") // Denormalized for queries
  
  hours       Decimal  @db.Decimal(5, 2) // Use Decimal not Float!
  description String?  @db.Text
  date        DateTime @db.Date
  billable    Boolean  @default(true) // For grant reporting
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
  
  @@index([userId, date])
  @@index([projectId, date])
  @@index([taskId, userId, date])
  @@map("time_entries")
}
8. Bucket-Level Membership
prismamodel BucketMember {
  id        String     @id @default(cuid())
  bucketId  String     @map("bucket_id")
  userId    String     @map("user_id")
  role      MemberRole @default(INFORMED)
  joinedAt  DateTime   @default(now()) @map("joined_at")
  isActive  Boolean    @default(true) @map("is_active")

  bucket    Bucket     @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id])

  @@unique([bucketId, userId])
  @@index([userId, role])
  @@map("bucket_members")
}
üè∑Ô∏è ENHANCED - Better Organization
9. First-Class Tag System
prismamodel Tag {
  id          String   @id @default(cuid())
  name        String
  labId       String   @map("lab_id")
  color       String   @default("#6B7280")
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  
  lab         Lab      @relation(fields: [labId], references: [id])
  taskTags    TaskTag[]
  projectTags ProjectTag[]
  
  @@unique([labId, name])
  @@index([labId, isActive])
  @@map("tags")
}

model TaskTag {
  taskId    String   @map("task_id")
  tagId     String   @map("tag_id")
  taggedAt  DateTime @default(now()) @map("tagged_at")
  taggedById String  @map("tagged_by_id")
  
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taggedBy  User     @relation(fields: [taggedById], references: [id])
  
  @@id([taskId, tagId])
  @@map("task_tags")
}

model ProjectTag {
  projectId  String   @map("project_id")
  tagId      String   @map("tag_id")
  taggedAt   DateTime @default(now()) @map("tagged_at")
  taggedById String   @map("tagged_by_id")
  
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taggedBy   User     @relation(fields: [taggedById], references: [id])
  
  @@id([projectId, tagId])
  @@map("project_tags")
}
üîÑ AUTOMATION - Workflow Features
10. Recurring Tasks & Templates
prismaenum RecurrencePattern {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

model TaskTemplate {
  id             String   @id @default(cuid())
  labId          String   @map("lab_id")
  name           String
  title          String
  description    String?  @db.Text
  estimatedHours Decimal? @db.Decimal(5, 2) @map("estimated_hours")
  tags           String[] // Template tags to apply
  isActive       Boolean  @default(true) @map("is_active")
  
  lab            Lab      @relation(fields: [labId], references: [id])
  
  @@unique([labId, name])
  @@map("task_templates")
}

model RecurringTask {
  id           String   @id @default(cuid())
  taskId       String   @unique @map("task_id")
  templateId   String?  @map("template_id") // Optional link to template
  
  pattern      RecurrencePattern
  interval     Int      @default(1) // Every X periods
  dayOfWeek    Int?     // 0-6 for weekly
  dayOfMonth   Int?     // 1-31 for monthly
  customCron   String?  // For complex patterns
  
  nextDueDate  DateTime @map("next_due_date")
  lastCreated  DateTime? @map("last_created")
  endDate      DateTime? @map("end_date")
  maxOccurrences Int?   @map("max_occurrences")
  occurrenceCount Int   @default(0) @map("occurrence_count")
  
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  template     TaskTemplate? @relation(fields: [templateId], references: [id])
  
  @@index([nextDueDate, isActive])
  @@map("recurring_tasks")
}
‚öôÔ∏è USER EXPERIENCE - Personalization
11. User Preferences
prismamodel UserPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique @map("user_id")
  
  // Notifications
  emailNotifications  Boolean  @default(true) @map("email_notifications")
  emailDigestFrequency String  @default("daily") @map("email_digest_frequency") // none|daily|weekly
  pushNotifications   Boolean  @default(true) @map("push_notifications")
  
  // UI Preferences
  theme               String   @default("light") // light|dark|auto
  dashboardLayout     Json?    @map("dashboard_layout")
  defaultLabId        String?  @map("default_lab_id")
  defaultView         String   @default("kanban") // kanban|list|calendar|gantt
  
  // Regional
  timezone            String   @default("America/Chicago")
  dateFormat          String   @default("MM/DD/YYYY") @map("date_format")
  timeFormat          String   @default("12h") @map("time_format") // 12h|24h
  weekStartsOn        Int      @default(0) @map("week_starts_on") // 0=Sunday
  
  user                User     @relation(fields: [userId], references: [id])
  
  @@map("user_preferences")
}
12. Custom Fields for Flexibility
prismamodel CustomField {
  id          String   @id @default(cuid())
  labId       String   @map("lab_id")
  entityType  String   // 'project'|'task'
  fieldName   String   @map("field_name")
  fieldLabel  String   @map("field_label") // Display name
  fieldType   CustomFieldType @map("field_type")
  options     Json?    // For select/multiselect
  validation  Json?    // Min/max, regex, etc.
  required    Boolean  @default(false)
  position    Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  
  lab         Lab      @relation(fields: [labId], references: [id])
  values      CustomFieldValue[]
  
  @@unique([labId, entityType, fieldName])
  @@index([labId, entityType, isActive])
  @@map("custom_fields")
}

enum CustomFieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  DATETIME
  SELECT
  MULTISELECT
  CHECKBOX
  URL
  EMAIL
}

model CustomFieldValue {
  id        String   @id @default(cuid())
  fieldId   String   @map("field_id")
  entityId  String   @map("entity_id")
  value     Json
  
  field     CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@unique([fieldId, entityId])
  @@index([entityId])
  @@map("custom_field_values")
}
üîç PERFORMANCE - Optimized Indexes
13. Additional Strategic Indexes
prisma// Add to Task model
@@index([projectId, status, position]) // Kanban board queries
@@index([assignees.userId, status, dueDate]) // "My tasks" dashboard

// Add to Project model  
@@index([bucketId, status, position]) // Bucket kanban view
@@index([members.userId, status]) // "My projects"

// Add to ActivityLog
@@index([labId, entityType, createdAt]) // Activity feed
@@index([userId, labId, createdAt]) // User activity history
üìù DATA INTEGRITY - Type Improvements
14. Replace Float with Decimal
prisma// In Task model, change:
estimatedHours Decimal? @db.Decimal(6, 2) @map("estimated_hours") 
actualHours    Decimal? @db.Decimal(6, 2) @map("actual_hours")

// In ProjectMember:
allocation     Decimal  @db.Decimal(5, 2) @default(20.00) // Percentage

// In User:
capacity       Decimal  @db.Decimal(5, 2) @default(40.00) // Hours per week
üîê UPDATED USER MODEL
prismamodel User {
  // ... existing fields ...
  
  // New relations
  bucketMembers       BucketMember[]
  comments            Comment[]
  mentions            Mention[]
  notifications       Notification[]
  attachments         Attachment[]
  timeEntries         TimeEntry[]
  statusChanges       StatusHistory[]
  preferences         UserPreference?
  taggedTasks         TaskTag[]
  taggedProjects      ProjectTag[]
  
  @@map("users")
}