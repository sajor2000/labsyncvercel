Full Application CRUD & Safety Verification Prompt
Please perform a complete audit of ALL CRUD operations in this application:

## 1. DELETE OPERATION SAFETY CHECK
For EVERY delete button/action in the application:

### Frontend Verification
```typescript
// Check each component file for delete operations:
Components to audit:
□ /pages/Buckets.tsx
□ /pages/Studies.tsx  
□ /pages/Tasks.tsx
□ /pages/Ideas.tsx
□ /pages/Deadlines.tsx
□ /pages/TeamMembers.tsx
□ /pages/[any other].tsx

For each delete action found:
1. Has confirmation dialog? YES/NO
2. Shows "cannot be undone" warning? YES/NO
3. Uses destructive variant styling? YES/NO
4. Dialog has Cancel + Confirm buttons? YES/NO
5. Confirm button labeled clearly (e.g., "Delete")? YES/NO
Backend Verification
typescript// For each delete endpoint:
□ DELETE /api/buckets/:id
□ DELETE /api/studies/:id
□ DELETE /api/tasks/:id
□ DELETE /api/ideas/:id
□ DELETE /api/deadlines/:id
□ DELETE /api/team-members/:id

Verify:
1. Authentication middleware present? YES/NO
2. Authorization check (user owns resource)? YES/NO
3. Proper error handling? YES/NO
4. Returns appropriate status codes? YES/NO
5. Database transaction handling? YES/NO
2. FULL CRUD FLOW VERIFICATION
CREATE Operations
For each entity type, verify:
Frontend:
□ Form validation before submission
□ Loading state during creation
□ Success/error feedback to user
□ Optimistic UI updates or refetch

Backend:
□ Input validation
□ Duplicate checking if needed
□ Proper database insertion
□ Returns created entity with ID
READ Operations
Frontend:
□ Loading states while fetching
□ Error states for failed fetches
□ Empty states for no data
□ Proper data display

Backend:
□ Pagination support
□ Filtering capabilities
□ Sorting options
□ Proper query optimization
UPDATE Operations
Frontend:
□ Edit forms pre-populated with current data
□ Validation before submission
□ Loading states during update
□ Success/error feedback

Backend:
□ Validates user can edit resource
□ Partial update support (PATCH)
□ Conflict resolution
□ Returns updated entity
3. END-TO-END FLOW TEST CHECKLIST
Test each entity type completely:
Buckets
□ CREATE: Add new bucket → Appears in list
□ READ: View bucket details → Shows correct data
□ UPDATE: Edit bucket name → Updates everywhere
□ DELETE: Remove bucket → Confirmation → Removed from UI
□ CASCADE: Check if deleting bucket handles related studies
Studies
□ CREATE: Add study to bucket → Shows in correct bucket
□ READ: View study details → All fields displayed
□ UPDATE: Edit study → Changes persist
□ DELETE: Remove study → Confirmation → Gone from bucket
□ RELATIONSHIP: Verify bucket association maintained
Tasks
□ CREATE: Add task → Appears in task list
□ READ: View task → Shows status, priority, etc.
□ UPDATE: Change status → Updates immediately  
□ DELETE: Remove task → Confirmation → Removed
□ FILTERS: Status/priority filters work
4. CONSISTENCY VERIFICATION
Across ALL entities, ensure:
□ Same confirmation dialog component used
□ Consistent wording: "This action cannot be undone"
□ Consistent button labels: "Cancel" / "Delete"
□ Same loading spinner component
□ Same error toast/notification style
□ Same success feedback pattern
5. SECURITY AUDIT
For ALL endpoints:
□ Authentication required (401 if not logged in)
□ Authorization enforced (403 if not owner)
□ SQL injection protection (parameterized queries)
□ Rate limiting implemented
□ Input sanitization
□ CORS properly configured
6. GENERATE REPORT
markdown# CRUD Operations Audit Report

## Delete Safety: [PASS/FAIL]
- All delete operations have confirmations: [YES/NO]
- Consistent warning messages: [YES/NO]
- Missing confirmations in: [list any]

## CRUD Completeness: [X/Y endpoints working]
### Working:
- [List all working CRUD operations]

### Issues Found:
- [List any broken operations]

## Security Status: [SECURE/AT RISK]
- Authentication: [status]
- Authorization: [status]  
- Input validation: [status]

## Recommendations:
1. [Priority fixes needed]
2. [Improvements suggested]
EXECUTION COMMAND
Please execute this audit now by:
1. Scanning all component files for CRUD operations
2. Checking all API endpoints in the backend
3. Verifying each delete has proper confirmation
4. Testing one complete CRUD cycle for each entity
5. Generating the report with specific file:line references for any issues
This comprehensive check ensures your entire application's CRUD operations are properly implemented and all destructive actions are protected with appropriate warnings.