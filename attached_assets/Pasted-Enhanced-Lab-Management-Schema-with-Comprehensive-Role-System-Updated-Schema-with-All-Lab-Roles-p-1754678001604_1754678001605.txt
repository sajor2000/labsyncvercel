Enhanced Lab Management Schema with Comprehensive Role System
📊 Updated Schema with All Lab Roles
prisma// ==========================================
// ENHANCED ENUMS FOR LAB ROLES
// ==========================================

enum UserRole {
  // Leadership
  PRINCIPAL_INVESTIGATOR      // PI - Lab head, grant holder
  CO_PRINCIPAL_INVESTIGATOR   // Co-PI - Shares leadership
  
  // Data & Analytics Team
  DATA_SCIENTIST              // Advanced analytics, ML/AI
  DATA_ANALYST                // Data processing, statistics
  
  // Coordination & Management
  CLINICAL_RESEARCH_COORDINATOR // CRC - Patient-facing, trial management
  REGULATORY_COORDINATOR        // IRB, compliance, documentation
  STAFF_COORDINATOR            // General lab operations
  LAB_ADMINISTRATOR            // System admin, access control
  
  // Training Positions
  FELLOW                       // Post-doc or clinical fellow
  MEDICAL_STUDENT             // Medical school trainee
  
  // Research Support
  RESEARCH_ASSISTANT          // Full/part-time RA
  VOLUNTEER_RESEARCH_ASSISTANT // Volunteer RA
  
  // External
  EXTERNAL_COLLABORATOR       // Outside institution
}

// Enhanced User model with additional fields
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  
  // Name fields
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  middleName  String?  @map("middle_name")
  name        String   // Full display name (computed)
  initials    String   // Auto-generated from names
  
  // Professional info
  role        UserRole @default(RESEARCH_ASSISTANT)
  title       String?  // Official job title if different from role
  department  String?  // e.g., "Rush Medical College"
  institution String   @default("Rush University Medical Center")
  
  // Contact & profile
  phone       String?
  avatar      String?  // Avatar color or image URL
  bio         String?  @db.Text
  linkedIn    String?  @map("linkedin_url")
  orcid       String?  // ORCID identifier for researchers
  
  // Work management
  capacity    Decimal  @default(40.00) @db.Decimal(5, 2) // Hours per week
  expertise   String[] // Array of expertise areas
  skills      String[] // Technical skills (e.g., Python, R, REDCap)
  
  // System fields
  isActive    Boolean  @default(true) @map("is_active")
  isExternal  Boolean  @default(false) @map("is_external") // For external collaborators
  lastActive  DateTime? @map("last_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations (unchanged)
  labs             LabMember[]
  createdProjects  Project[]     @relation("ProjectCreator")
  projectMembers   ProjectMember[]
  createdTasks     Task[]        @relation("TaskCreator")
  completedTasks   Task[]        @relation("TaskCompleter")
  taskAssignments  TaskAssignment[]
  // ... other relations
  
  @@index([email])
  @@index([role])
  @@index([isActive, lastActive])
  @@map("users")
}

// Enhanced Lab model with multiple PI support
model Lab {
  id          String   @id @default(cuid())
  name        String   // "RICCC" or "RHEDAS"
  fullName    String?  @map("full_name") // "Rush Internal Critical Care Collaborative"
  shortName   String   @unique @map("short_name")
  description String?  @db.Text
  
  // Lab details
  department  String?  // "Internal Medicine - Critical Care"
  building    String?  // Physical location
  room        String?  // Room number
  website     String?  // Lab website URL
  
  // Branding
  logo        String?
  primaryColor String  @default("#8B5CF6") @map("primary_color")
  
  // Configuration
  settings    Json?    // Lab-specific settings
  features    String[] // Enabled features for this lab
  
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  members     LabMember[]
  buckets     Bucket[]
  ideas       Idea[]
  standups    Standup[]
  tags        Tag[]
  templates   TaskTemplate[]
  customFields CustomField[]
  
  @@map("labs")
}

// Enhanced LabMember with role-specific permissions
model LabMember {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  labId       String   @map("lab_id")
  
  // Permissions based on role
  isAdmin     Boolean  @default(false) @map("is_admin") // Can manage lab settings
  canCreateProjects Boolean @default(false) @map("can_create_projects")
  canAssignTasks    Boolean @default(false) @map("can_assign_tasks")
  canViewAllProjects Boolean @default(false) @map("can_view_all_projects")
  canEditAllProjects Boolean @default(false) @map("can_edit_all_projects")
  canManageMembers  Boolean @default(false) @map("can_manage_members")
  canApproveIdeas   Boolean @default(false) @map("can_approve_ideas")
  canAccessReports  Boolean @default(false) @map("can_access_reports")
  
  // Status and dates
  isActive    Boolean  @default(true) @map("is_active")
  joinedAt    DateTime @default(now()) @map("joined_at")
  leftAt      DateTime? @map("left_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lab         Lab      @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@unique([userId, labId])
  @@index([labId, isActive])
  @@index([userId, isActive])
  @@map("lab_members")
}

// Role-based permission matrix helper
model RolePermission {
  id          String   @id @default(cuid())
  role        UserRole
  permission  String   // e.g., "create_project", "approve_irb", "manage_budget"
  labId       String?  @map("lab_id") // Optional: lab-specific permissions
  
  lab         Lab?     @relation(fields: [labId], references: [id])
  
  @@unique([role, permission, labId])
  @@index([role])
  @@map("role_permissions")
}
🎯 Data Seed Script for Team Roster
typescript// prisma/seed.ts
import { PrismaClient, UserRole } from '@prisma/client';

const prisma = new PrismaClient();

const TEAM_ROSTER = [
  {
    firstName: 'J.C.',
    lastName: 'Rojas',
    email: 'Juan_rojas@rush.edu',
    initials: 'JCR',
    role: UserRole.PRINCIPAL_INVESTIGATOR,
    labs: ['RICCC', 'RHEDAS'],
    capacity: 40,
    expertise: ['Critical Care', 'Clinical Research', 'Grant Writing']
  },
  {
    firstName: 'Kevin',
    lastName: 'Buell',
    email: 'Kevin_Buell@rush.edu',
    initials: 'KB',
    role: UserRole.PRINCIPAL_INVESTIGATOR,
    labs: ['RICCC'],
    capacity: 40,
    expertise: ['Critical Care', 'Medical Education']
  },
  {
    firstName: 'Mia',
    lastName: 'Mcclintic',
    middleName: 'R',
    email: 'Mia_R_McClintic@rush.edu',
    initials: 'MRM',
    role: UserRole.REGULATORY_COORDINATOR,
    labs: ['RICCC'],
    capacity: 40,
    expertise: ['IRB Submissions', 'Regulatory Compliance', 'Documentation']
  },
  {
    firstName: 'Jason',
    lastName: 'Stanghelle',
    email: 'Jason_Stanghelle@rush.edu',
    initials: 'JS',
    role: UserRole.DATA_ANALYST,
    labs: ['RHEDAS'],
    capacity: 40,
    expertise: ['Statistical Analysis', 'R', 'Data Visualization'],
    skills: ['R', 'Python', 'SAS', 'REDCap']
  },
  {
    firstName: 'Jada',
    middleName: 'J',
    lastName: 'Sherrod',
    email: 'Jada_J_Sherrod@rush.edu',
    initials: 'JJS',
    role: UserRole.STAFF_COORDINATOR,
    labs: ['RHEDAS'],
    capacity: 40,
    expertise: ['Project Management', 'Team Coordination']
  },
  {
    firstName: 'Meher Sapna',
    lastName: 'Masanpally',
    email: 'MeherSapna_Masanpally@rush.edu',
    initials: 'MSM',
    role: UserRole.DATA_ANALYST,
    labs: ['RHEDAS'],
    capacity: 40,
    expertise: ['Data Analysis', 'Python', 'Machine Learning'],
    skills: ['Python', 'SQL', 'Tableau', 'Power BI']
  },
  {
    firstName: 'Kian',
    lastName: 'Mokhlesi',
    email: 'kianmokhlesi@gmail.com',
    initials: 'KM',
    role: UserRole.MEDICAL_STUDENT,
    labs: ['RICCC'],
    capacity: 20, // Part-time
    isExternal: true, // Using personal email
    expertise: ['Clinical Research', 'Data Collection']
  },
  {
    firstName: 'Dariush',
    lastName: 'Mokhlesi',
    email: 'dariushmokhlesi@gmail.com',
    initials: 'DM',
    role: UserRole.MEDICAL_STUDENT,
    labs: ['RICCC'],
    capacity: 20, // Part-time
    isExternal: true,
    expertise: ['Clinical Research', 'Literature Review']
  },
  {
    firstName: 'Connor',
    middleName: 'P',
    lastName: 'Lafeber',
    email: 'Connor_P_Lafeber@rush.edu',
    initials: 'CPL',
    role: UserRole.FELLOW,
    labs: ['RICCC'],
    capacity: 50, // Fellows often work more
    expertise: ['Critical Care', 'Clinical Trials', 'Medical Writing']
  },
  {
    firstName: 'Vaishvik',
    lastName: 'Chaudhari',
    email: 'Vaishvik_Chaudhari@rush.edu',
    initials: 'VC',
    role: UserRole.DATA_SCIENTIST,
    labs: ['RICCC'],
    capacity: 40,
    expertise: ['Machine Learning', 'AI/LLM', 'Predictive Modeling'],
    skills: ['Python', 'TensorFlow', 'PyTorch', 'SQL', 'AWS']
  },
  {
    firstName: 'Hoda',
    lastName: 'Masteri',
    email: 'Hoda_MasteriFarahani@rush.edu',
    initials: 'HM',
    role: UserRole.DATA_ANALYST,
    labs: ['RICCC'],
    capacity: 40,
    expertise: ['EHR Data', 'Clinical Analytics', 'REDCap'],
    skills: ['SQL', 'R', 'REDCap', 'Epic Clarity']
  }
];

async function seed() {
  // Create labs first
  const riccc = await prisma.lab.upsert({
    where: { shortName: 'RICCC' },
    update: {},
    create: {
      shortName: 'RICCC',
      name: 'Rush Internal Critical Care Collaborative',
      fullName: 'Rush Internal Critical Care Collaborative',
      department: 'Internal Medicine - Critical Care',
      description: 'Advancing critical care through innovative research and collaboration',
      primaryColor: '#8B5CF6',
      features: ['projects', 'tasks', 'ideas', 'standups', 'analytics']
    }
  });

  const rhedas = await prisma.lab.upsert({
    where: { shortName: 'RHEDAS' },
    update: {},
    create: {
      shortName: 'RHEDAS',
      name: 'RHEDAS Lab',
      fullName: 'Rush Health Equity Data Analytics & Science Lab',
      department: 'Internal Medicine',
      description: 'Health equity research through data science',
      primaryColor: '#10B981',
      features: ['projects', 'tasks', 'analytics', 'reports']
    }
  });

  const labMap = { RICCC: riccc.id, RHEDAS: rhedas.id };

  // Create users and lab memberships
  for (const member of TEAM_ROSTER) {
    const { labs, middleName, expertise, skills, ...userData } = member;
    
    const user = await prisma.user.upsert({
      where: { email: member.email },
      update: {
        ...userData,
        name: `${member.firstName}${middleName ? ' ' + middleName : ''} ${member.lastName}`,
        expertise: expertise || [],
        skills: skills || []
      },
      create: {
        ...userData,
        name: `${member.firstName}${middleName ? ' ' + middleName : ''} ${member.lastName}`,
        middleName,
        expertise: expertise || [],
        skills: skills || [],
        avatar: generateAvatarColor(member.initials)
      }
    });

    // Create lab memberships with role-based permissions
    for (const labName of labs) {
      const permissions = getRolePermissions(member.role);
      
      await prisma.labMember.upsert({
        where: {
          userId_labId: {
            userId: user.id,
            labId: labMap[labName]
          }
        },
        update: permissions,
        create: {
          userId: user.id,
          labId: labMap[labName],
          ...permissions
        }
      });
    }
  }

  // Create default role permissions
  await createRolePermissions();
  
  // Create sample buckets for each lab
  await createSampleBuckets(riccc.id, rhedas.id);
}

function getRolePermissions(role: UserRole) {
  const permissions = {
    [UserRole.PRINCIPAL_INVESTIGATOR]: {
      isAdmin: true,
      canCreateProjects: true,
      canAssignTasks: true,
      canViewAllProjects: true,
      canEditAllProjects: true,
      canManageMembers: true,
      canApproveIdeas: true,
      canAccessReports: true
    },
    [UserRole.DATA_SCIENTIST]: {
      canCreateProjects: true,
      canAssignTasks: true,
      canViewAllProjects: true,
      canEditAllProjects: false,
      canAccessReports: true
    },
    [UserRole.DATA_ANALYST]: {
      canCreateProjects: false,
      canAssignTasks: true,
      canViewAllProjects: true,
      canEditAllProjects: false,
      canAccessReports: true
    },
    [UserRole.CLINICAL_RESEARCH_COORDINATOR]: {
      canCreateProjects: true,
      canAssignTasks: true,
      canViewAllProjects: true,
      canEditAllProjects: true,
      canManageMembers: false,
      canAccessReports: true
    },
    [UserRole.REGULATORY_COORDINATOR]: {
      canCreateProjects: false,
      canAssignTasks: false,
      canViewAllProjects: true,
      canEditAllProjects: false,
      canApproveIdeas: true,
      canAccessReports: true
    },
    [UserRole.STAFF_COORDINATOR]: {
      canCreateProjects: true,
      canAssignTasks: true,
      canViewAllProjects: true,
      canEditAllProjects: false,
      canManageMembers: true
    },
    [UserRole.FELLOW]: {
      canCreateProjects: true,
      canAssignTasks: true,
      canViewAllProjects: false,
      canEditAllProjects: false
    },
    [UserRole.MEDICAL_STUDENT]: {
      canCreateProjects: false,
      canAssignTasks: false,
      canViewAllProjects: false,
      canEditAllProjects: false
    },
    [UserRole.RESEARCH_ASSISTANT]: {
      canCreateProjects: false,
      canAssignTasks: false,
      canViewAllProjects: false,
      canEditAllProjects: false
    },
    [UserRole.VOLUNTEER_RESEARCH_ASSISTANT]: {
      canCreateProjects: false,
      canAssignTasks: false,
      canViewAllProjects: false,
      canEditAllProjects: false
    }
  };

  return permissions[role] || permissions[UserRole.RESEARCH_ASSISTANT];
}

function generateAvatarColor(initials: string): string {
  const colors = [
    '#8B5CF6', // Purple
    '#10B981', // Green
    '#F59E0B', // Amber
    '#EF4444', // Red
    '#3B82F6', // Blue
    '#EC4899', // Pink
    '#14B8A6', // Teal
    '#F97316'  // Orange
  ];
  
  // Generate consistent color based on initials
  const hash = initials.split('').reduce((acc, char) => {
    return acc + char.charCodeAt(0);
  }, 0);
  
  return colors[hash % colors.length];
}

async function createSampleBuckets(ricccId: string, rhedasId: string) {
  // RICCC Buckets
  await prisma.bucket.createMany({
    data: [
      {
        labId: ricccId,
        name: 'Active Clinical Trials',
        description: 'Ongoing interventional studies',
        color: '#8B5CF6',
        icon: 'clipboard-list',
        position: 0
      },
      {
        labId: ricccId,
        name: 'IRB Submissions',
        description: 'Projects in IRB review',
        color: '#F59E0B',
        icon: 'file-text',
        position: 1
      },
      {
        labId: ricccId,
        name: 'Data Analysis',
        description: 'Projects in analysis phase',
        color: '#3B82F6',
        icon: 'chart-bar',
        position: 2
      },
      {
        labId: ricccId,
        name: 'Manuscripts',
        description: 'Papers in preparation or review',
        color: '#10B981',
        icon: 'edit',
        position: 3
      }
    ]
  });

  // RHEDAS Buckets
  await prisma.bucket.createMany({
    data: [
      {
        labId: rhedasId,
        name: 'Health Equity Studies',
        description: 'Disparities research',
        color: '#10B981',
        icon: 'users',
        position: 0
      },
      {
        labId: rhedasId,
        name: 'EHR Analytics',
        description: 'Electronic health record analysis',
        color: '#EC4899',
        icon: 'database',
        position: 1
      },
      {
        labId: rhedasId,
        name: 'Machine Learning',
        description: 'AI/ML projects',
        color: '#6366F1',
        icon: 'cpu',
        position: 2
      }
    ]
  });
}

async function createRolePermissions() {
  const permissions = [
    // PI permissions
    { role: UserRole.PRINCIPAL_INVESTIGATOR, permission: 'manage_lab_settings' },
    { role: UserRole.PRINCIPAL_INVESTIGATOR, permission: 'approve_budget' },
    { role: UserRole.PRINCIPAL_INVESTIGATOR, permission: 'sign_contracts' },
    
    // Data Scientist permissions
    { role: UserRole.DATA_SCIENTIST, permission: 'access_compute_resources' },
    { role: UserRole.DATA_SCIENTIST, permission: 'create_ml_models' },
    
    // Regulatory Coordinator permissions
    { role: UserRole.REGULATORY_COORDINATOR, permission: 'submit_irb' },
    { role: UserRole.REGULATORY_COORDINATOR, permission: 'manage_compliance' },
    
    // CRC permissions
    { role: UserRole.CLINICAL_RESEARCH_COORDINATOR, permission: 'manage_participants' },
    { role: UserRole.CLINICAL_RESEARCH_COORDINATOR, permission: 'collect_clinical_data' },
    
    // Fellow permissions
    { role: UserRole.FELLOW, permission: 'lead_sub_studies' },
    { role: UserRole.FELLOW, permission: 'mentor_students' }
  ];

  for (const perm of permissions) {
    await prisma.rolePermission.upsert({
      where: {
        role_permission_labId: {
          role: perm.role,
          permission: perm.permission,
          labId: null
        }
      },
      update: {},
      create: perm
    });
  }
}

seed()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
🎨 Frontend Role-Based UI Components
typescript// components/TeamMember.tsx
interface TeamMemberProps {
  user: User;
  showCapacity?: boolean;
  showExpertise?: boolean;
}

export function TeamMemberCard({ user, showCapacity, showExpertise }: TeamMemberProps) {
  const roleColors = {
    PRINCIPAL_INVESTIGATOR: 'bg-purple-100 text-purple-800',
    DATA_SCIENTIST: 'bg-blue-100 text-blue-800',
    DATA_ANALYST: 'bg-indigo-100 text-indigo-800',
    CLINICAL_RESEARCH_COORDINATOR: 'bg-green-100 text-green-800',
    REGULATORY_COORDINATOR: 'bg-yellow-100 text-yellow-800',
    STAFF_COORDINATOR: 'bg-orange-100 text-orange-800',
    FELLOW: 'bg-teal-100 text-teal-800',
    MEDICAL_STUDENT: 'bg-pink-100 text-pink-800',
    RESEARCH_ASSISTANT: 'bg-gray-100 text-gray-800',
    VOLUNTEER_RESEARCH_ASSISTANT: 'bg-gray-50 text-gray-700'
  };

  const roleIcons = {
    PRINCIPAL_INVESTIGATOR: '👨‍🔬',
    DATA_SCIENTIST: '🤖',
    DATA_ANALYST: '📊',
    CLINICAL_RESEARCH_COORDINATOR: '🏥',
    REGULATORY_COORDINATOR: '📋',
    STAFF_COORDINATOR: '📅',
    FELLOW: '🎓',
    MEDICAL_STUDENT: '👨‍⚕️',
    RESEARCH_ASSISTANT: '🔬',
    VOLUNTEER_RESEARCH_ASSISTANT: '🙋'
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border p-4 hover:shadow-md transition-shadow">
      <div className="flex items-start justify-between">
        <div className="flex items-center space-x-3">
          <div 
            className="w-10 h-10 rounded-full flex items-center justify-center text-white font-semibold"
            style={{ backgroundColor: user.avatar }}
          >
            {user.initials}
          </div>
          <div>
            <h3 className="font-semibold text-gray-900">{user.name}</h3>
            <p className="text-sm text-gray-500">{user.email}</p>
          </div>
        </div>
        <span className={`px-2 py-1 rounded-full text-xs font-medium ${roleColors[user.role]}`}>
          {roleIcons[user.role]} {formatRole(user.role)}
        </span>
      </div>
      
      {showCapacity && (
        <div className="mt-3">
          <div className="flex justify-between text-sm">
            <span className="text-gray-500">Capacity</span>
            <span className="font-medium">{user.capacity}h/week</span>
          </div>
          <CapacityBar current={calculateUtilization(user)} capacity={user.capacity} />
        </div>
      )}
      
      {showExpertise && user.expertise.length > 0 && (
        <div className="mt-3">
          <p className="text-xs text-gray-500 mb-1">Expertise</p>
          <div className="flex flex-wrap gap-1">
            {user.expertise.map(skill => (
              <span key={skill} className="px-2 py-0.5 bg-gray-100 text-gray-700 text-xs rounded">
                {skill}
              </span>
            ))}
          </div>
        </div>
      )}
      
      {user.isExternal && (
        <div className="mt-2">
          <span className="text-xs text-amber-600 flex items-center">
            <ExternalLinkIcon className="w-3 h-3 mr-1" />
            External Collaborator
          </span>
        </div>
      )}
    </div>
  );
}

// components/RoleBasedAccess.tsx
export function RoleBasedAccess({ 
  allowedRoles, 
  children, 
  fallback = null 
}: {
  allowedRoles: UserRole[];
  children: React.ReactNode;
  fallback?: React.ReactNode;
}) {
  const { user } = useAuth();
  const { labMember } = useLabContext();
  
  // Check role-based access
  if (!allowedRoles.includes(user.role)) {
    return <>{fallback}</>;
  }
  
  // Additional permission checks
  const hasPermission = checkPermissions(labMember, children.props.permission);
  
  if (!hasPermission) {
    return <>{fallback}</>;
  }
  
  return <>{children}</>;
}

// Usage
<RoleBasedAccess 
  allowedRoles={[
    UserRole.PRINCIPAL_INVESTIGATOR,
    UserRole.CLINICAL_RESEARCH_COORDINATOR
  ]}
  permission="create_project"
>
  <Button onClick={createNewProject}>
    Create New Project
  </Button>
</RoleBasedAccess>
🔐 Backend Permission System
typescript// middleware/permissions.ts
export class PermissionService {
  async checkProjectAccess(
    userId: string,
    projectId: string,
    requiredPermission: string
  ): Promise<boolean> {
    // Get user's role and lab membership
    const projectMember = await prisma.projectMember.findFirst({
      where: {
        userId,
        projectId,
        isActive: true
      },
      include: {
        user: true,
        project: {
          include: {
            bucket: {
              include: { lab: true }
            }
          }
        }
      }
    });

    // Check if user is a lab member
    const labMember = await prisma.labMember.findFirst({
      where: {
        userId,
        labId: projectMember?.project.bucket.lab.id,
        isActive: true
      }
    });

    // Role-based permission matrix
    const permissions = {
      PRINCIPAL_INVESTIGATOR: ['*'], // All permissions
      CO_PRINCIPAL_INVESTIGATOR: ['*'],
      DATA_SCIENTIST: [
        'view_project',
        'edit_project',
        'create_task',
        'assign_task',
        'view_data',
        'analyze_data'
      ],
      DATA_ANALYST: [
        'view_project',
        'view_data',
        'analyze_data',
        'create_report'
      ],
      CLINICAL_RESEARCH_COORDINATOR: [
        'view_project',
        'edit_project',
        'create_task',
        'assign_task',
        'manage_participants',
        'collect_data'
      ],
      REGULATORY_COORDINATOR: [
        'view_project',
        'manage_compliance',
        'submit_irb',
        'view_documents'
      ],
      STAFF_COORDINATOR: [
        'view_project',
        'edit_project',
        'create_task',
        'assign_task',
        'manage_calendar'
      ],
      FELLOW: [
        'view_project',
        'edit_project',
        'create_task',
        'analyze_data'
      ],
      MEDICAL_STUDENT: [
        'view_project',
        'view_task',
        'update_own_tasks'
      ],
      RESEARCH_ASSISTANT: [
        'view_project',
        'view_task',
        'update_own_tasks',
        'collect_data'
      ],
      VOLUNTEER_RESEARCH_ASSISTANT: [
        'view_project',
        'view_task',
        'update_own_tasks'
      ]
    };

    const userRole = projectMember?.user.role;
    const rolePermissions = permissions[userRole] || [];

    // Check if user has the required permission
    return (
      rolePermissions.includes('*') ||
      rolePermissions.includes(requiredPermission) ||
      (labMember && this.checkLabPermission(labMember, requiredPermission))
    );
  }

  private checkLabPermission(
    labMember: LabMember,
    permission: string
  ): boolean {
    const permissionMap = {
      'create_project': labMember.canCreateProjects,
      'assign_task': labMember.canAssignTasks,
      'view_all_projects': labMember.canViewAllProjects,
      'edit_all_projects': labMember.canEditAllProjects,
      'manage_members': labMember.canManageMembers,
      'approve_ideas': labMember.canApproveIdeas,
      'access_reports': labMember.canAccessReports
    };

    return permissionMap[permission] || false;
  }
}