// app/api/send-meeting-email/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY!);

export async function POST(request: NextRequest) {
  try {
    const { meeting, recipients } = await request.json();

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; }
          h1 { color: #333; }
          .summary { background: #f0f8ff; padding: 15px; border-radius: 5px; margin: 20px 0; }
          .footer { color: #666; font-size: 12px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; }
        </style>
      </head>
      <body>
        <h1>Lab Standup Meeting Summary</h1>
        <p><strong>Date:</strong> ${meeting.meeting_date}</p>
        <p><strong>Duration:</strong> ${Math.floor(meeting.duration / 60)} minutes</p>
        
        <h2>Tasks & Progress</h2>
        ${meeting.html}
        
        <div class="summary">
          <h3>Weekly Summary</h3>
          ${meeting.summary.tasks_due_this_week.length > 0 ? 
            `<p><strong>Due this week:</strong> ${meeting.summary.tasks_due_this_week.join(', ')}</p>` : ''}
          ${meeting.summary.overdue_tasks.length > 0 ? 
            `<p style="color: red;"><strong>Overdue:</strong> ${meeting.summary.overdue_tasks.join(', ')}</p>` : ''}
          ${meeting.summary.blockers.length > 0 ? 
            `<p style="color: orange;"><strong>Blockers:</strong> ${meeting.summary.blockers.join(', ')}</p>` : ''}
        </div>
        
        <div class="footer">
          <p>This automated summary was generated from the meeting recording.</p>
          <p>Meeting logs are stored for 14 days for review.</p>
        </div>
      </body>
      </html>
    `;

    const { data, error } = await resend.emails.send({
      from: 'Lab Meeting Recorder <jcrojas@clif-icu.org>',
      to: recipients,
      subject: `Standup Meeting Notes - ${meeting.meeting_date}`,
      html,
    });

    if (error) {
      return NextResponse.json({ error }, { status: 400 });
    }

    return NextResponse.json({ success: true, data });
  } catch (error) {
    console.error('Email error:', error);
    return NextResponse.json(
      { error: 'Failed to send email' },
      { status: 500 }
    );
  }
}